{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","countries","rightAnswer","init","where","encodeURIComponent","JSON","stringify","continent","__type","className","objectId","fetch","headers","then","res","json","result","setState","isLoaded","error","random_int","Math","floor","random","projection","projectionConfig","rotate","scale","width","height","style","geography","geographies","map","geo","fill","stroke","onClick","selectedCountry","properties","selectedCountryKey","rsmKey","oldCountry","name","console","log","default","outline","hover","pressed","src","this","emoji","color","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73c3b5df.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport emoji from \"react-easy-emoji\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { countries: [], rightAnswer: false, init: false };\n  }\n  componentDidMount() {\n    const where = encodeURIComponent(\n      JSON.stringify({\n        continent: {\n          __type: \"Pointer\",\n          className: \"Continent\",\n          objectId: \"28HX8qDZHw\",\n        },\n      })\n    );\n    fetch(\n      `https://parseapi.back4app.com/classes/Country?order=name&keys=name,emoji&where=${where}`,\n      {\n        headers: {\n          \"X-Parse-Application-Id\": \"mxsebv4KoWIGkRntXwyzg6c6DhKWQuit8Ry9sHja\",\n          \"X-Parse-Master-Key\": \"TpO0j3lG2PmEVMXlKYQACoOXKQrL3lwM0HwR9dbH\",\n        },\n      }\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            countries: result[\"results\"],\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  render() {\n    let random_int = Math.floor(Math.random() * Math.floor(44));\n    return (\n      <div className=\"app\">\n        <div className=\"map\">\n          <ComposableMap\n            projection=\"geoAzimuthalEqualArea\"\n            projectionConfig={{\n              rotate: [-20.0, -52.0, 0],\n              scale: 700,\n            }}\n            width={800}\n            height={400}\n            style={{ width: \"100%\", height: \"auto\" }}\n          >\n            <ZoomableGroup>\n              <Geographies geography={geoUrl}>\n                {({ geographies }) =>\n                  geographies.map((geo) => (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill=\"#9998A3\"\n                      stroke=\"#EAEAEC\"\n                      onClick={() => {\n                        this.setState(\n                          {\n                            selectedCountry: geo.properties[\"NAME\"],\n                            selectedCountryKey: geo.rsmKey,\n                            oldCountry: this.state.countries[random_int].name,\n                            init: true\n                          },\n                          () => {\n                            if (\n                              this.state.countries[random_int].name ===\n                              this.state.selectedCountry\n                            ) {\n                              this.setState({ rightAnswer: true }, () =>\n                                console.log(this.state.selectedCountry)\n                              );\n                            } else {\n                              this.setState({ rightAnswer: false }, () =>\n                                console.log(geo)\n                              );\n                            }\n                          }\n                        );\n                      }}\n                      style={{\n                        default: {\n                          fill:\n                            this.state.selectedCountryKey === geo.rsmKey\n                              ? this.state.rightAnswer\n                                ? \"green\"\n                                : \"red\"\n                              : \"\",\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: \"#F53\",\n                          outline: \"none\",\n                        },\n                        pressed: {\n                          fill: \"red\",\n                          outline: \"none\",\n                        },\n                      }}\n                    />\n                  ))\n                }\n              </Geographies>\n            </ZoomableGroup>\n          </ComposableMap>\n        </div>\n        <div className=\"side-nav\">\n          <div className='logo'>\n            <img src='./logo.png' />\n          </div>\n          <h1>\n            {this.state.isLoaded\n              ? emoji(this.state.countries[random_int].emoji)\n              : \"\"}\n          </h1>\n          <h2>\n            {this.state.init ? this.state.isLoaded && this.state.rightAnswer ? (\n              <a style={{ color: \"green\" }}> {\"Правилен отговор\"} </a>\n            ) : (\n              <a style={{ color: \"red\" }}> {\"Грешен отговор\"}</a>\n            ): \"\"}\n          </h2>\n          {\n            this.state.isLoaded ? (\n              this.state.selectedCountry ? (\n                this.state.rightAnswer ? (\n                  \"\"\n                ) : (\n                  <p>\n                    Ти избра {this.state.selectedCountry}, а знамето беше на{\" \"}\n                    {this.state.oldCountry}\n                  </p>\n                )\n              ) : (\n                \"\"\n              )\n            ) : (\n              \"\"\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
[{"C:\\Users\\vikic\\Documents\\School\\geo-quizzer\\src\\index.js":"1","C:\\Users\\vikic\\Documents\\School\\geo-quizzer\\src\\App.js":"2","C:\\Users\\vikic\\Documents\\School\\geo-quizzer\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":5234,"mtime":1612362899174,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1aosajh",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vikic\\Documents\\School\\geo-quizzer\\src\\index.js",[],["16","17"],"C:\\Users\\vikic\\Documents\\School\\geo-quizzer\\src\\App.js",["18","19","20"],"import React from \"react\";\nimport \"./App.css\";\nimport emoji from \"react-easy-emoji\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { countries: [], rightAnswer: false, init: false };\n  }\n  componentDidMount() {\n    const where = encodeURIComponent(\n      JSON.stringify({\n        continent: {\n          __type: \"Pointer\",\n          className: \"Continent\",\n          objectId: \"28HX8qDZHw\",\n        },\n      })\n    );\n    fetch(\n      `https://parseapi.back4app.com/classes/Country?order=name&keys=name,emoji&where=${where}`,\n      {\n        headers: {\n          \"X-Parse-Application-Id\": \"mxsebv4KoWIGkRntXwyzg6c6DhKWQuit8Ry9sHja\",\n          \"X-Parse-Master-Key\": \"TpO0j3lG2PmEVMXlKYQACoOXKQrL3lwM0HwR9dbH\",\n        },\n      }\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            countries: result[\"results\"],\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  render() {\n    let random_int = Math.floor(Math.random() * Math.floor(44));\n    return (\n      <div className=\"app\">\n        <div className=\"map\">\n          <ComposableMap\n            projection=\"geoAzimuthalEqualArea\"\n            projectionConfig={{\n              rotate: [-20.0, -52.0, 0],\n              scale: 700,\n            }}\n            width={800}\n            height={400}\n            style={{ width: \"100%\", height: \"auto\" }}\n          >\n            <ZoomableGroup>\n              <Geographies geography={geoUrl}>\n                {({ geographies }) =>\n                  geographies.map((geo) => (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill=\"#9998A3\"\n                      stroke=\"#EAEAEC\"\n                      onClick={() => {\n                        this.setState(\n                          {\n                            selectedCountry: geo.properties[\"NAME\"],\n                            selectedCountryKey: geo.rsmKey,\n                            oldCountry: this.state.countries[random_int].name,\n                            init: true\n                          },\n                          () => {\n                            if (\n                              this.state.countries[random_int].name ===\n                              this.state.selectedCountry\n                            ) {\n                              this.setState({ rightAnswer: true }, () =>\n                                console.log(this.state.selectedCountry)\n                              );\n                            } else {\n                              this.setState({ rightAnswer: false }, () =>\n                                console.log(geo)\n                              );\n                            }\n                          }\n                        );\n                      }}\n                      style={{\n                        default: {\n                          fill:\n                            this.state.selectedCountryKey === geo.rsmKey\n                              ? this.state.rightAnswer\n                                ? \"green\"\n                                : \"red\"\n                              : \"\",\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: \"#F53\",\n                          outline: \"none\",\n                        },\n                        pressed: {\n                          fill: \"red\",\n                          outline: \"none\",\n                        },\n                      }}\n                    />\n                  ))\n                }\n              </Geographies>\n            </ZoomableGroup>\n          </ComposableMap>\n        </div>\n        <div className=\"side-nav\">\n          <div className='logo'>\n            <img src='./logo.png' />\n          </div>\n          <h1>\n            {this.state.isLoaded\n              ? emoji(this.state.countries[random_int].emoji)\n              : \"\"}\n          </h1>\n          <h2>\n            {this.state.init ? this.state.isLoaded && this.state.rightAnswer ? (\n              <a style={{ color: \"green\" }}> {\"Правилен отговор\"} </a>\n            ) : (\n              <a style={{ color: \"red\" }}> {\"Грешен отговор\"}</a>\n            ): \"\"}\n          </h2>\n          {\n            this.state.isLoaded ? (\n              this.state.selectedCountry ? (\n                this.state.rightAnswer ? (\n                  \"\"\n                ) : (\n                  <p>\n                    Ти избра {this.state.selectedCountry}, а знамето беше на{\" \"}\n                    {this.state.oldCountry}\n                  </p>\n                )\n              ) : (\n                \"\"\n              )\n            ) : (\n              \"\"\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\vikic\\Documents\\School\\geo-quizzer\\src\\reportWebVitals.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":130,"column":13,"nodeType":"27","endLine":130,"endColumn":37},{"ruleId":"28","severity":1,"message":"29","line":139,"column":15,"nodeType":"27","endLine":139,"endColumn":45},{"ruleId":"28","severity":1,"message":"29","line":141,"column":15,"nodeType":"27","endLine":141,"endColumn":43},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]